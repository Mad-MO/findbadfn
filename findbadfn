#!/bin/bash



# Based on the filename restrictions of Windows:
#   https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file
#
# ...this script searches for files and directories that use the following reserved characters:
#  < (less than)
#  > (greater than)
#  : (colon)
#  " (double quote)
#  / (forward slash)
#  \ (backslash)
#  | (vertical bar or pipe)
#  ? (question mark)
#  * (asterisk)
#
# ...this script also searches for files that use the following reserved names:
#   CON,
#   PRN,
#   AUX,
#   NUL,
#   COM0, COM1, COM2, COM3, COM4, COM5, COM6, COM7, COM8, COM9, COM¹, COM², COM³,
#   LPT0, LPT1, LPT2, LPT3, LPT4, LPT5, LPT6, LPT7, LPT8, LPT9, LPT¹, LPT², and LPT³
#
# ...this script checks for trailing spaces or dots in filenames:
#   "Do not end a file or directory name with a space or a period."
#
# ...this script checks for control characters in filenames:
#   "Characters whose integer representations are in the range from 1 through 31, ..."
#   This is handled by using the [:cntrl:] character class in the find command which matches characters 0 through 37, and 177 (DEL).
#   https://www.gnu.org/software/grep/manual/html_node/Character-Classes-and-Bracket-Expressions.html

echo
echo "Find empty files / dirs"
find $1 -empty \
  | sort \
  | grep -v "Trash-1000" \
  | grep -v "lost+found"



echo
echo "Find trailing spaces"
find $1 -name "*[ ]" \
  | sort



echo
echo "Find Trailing dots"
find $1 -name "*[\.]" \
  | sort



echo
echo "Find bad characters"
find $1 -name '*[\<\>\:\"\\\|\?\*]*' \
  | sort



echo
echo "Find control characters"
find $1 -name '*[[:cntrl:]*' \
  | sort



echo
echo "Find reserved filenames"
find $1 -iname 'CON' \
     -o -iname 'PRN' \
     -o -iname 'AUX' \
     -o -iname 'NUL' \
     -o -iname 'COM[0-9¹²³]' \
     -o -iname 'LPT[0-9¹²³]' \
  | sort



# Assume case-insensitive filesystem and search for folders and files that differ only by case:
#   "Do not assume case sensitivity. For example, consider the names OSCAR, Oscar, and oscar to be the same,
#   even though some file systems (such as a POSIX-compliant file system) may consider them as different."

echo
echo "Find identical names when ignoring case"
find $1 \
  | sort \
  | tr '[:upper:]' '[:lower:]' \
  | uniq -d

