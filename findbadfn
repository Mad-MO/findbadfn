#!/usr/bin/env bash

# File:    # TODO: Filename
# Author:  # TODO: Author
# License: MIT
# Brief:   # TODO: Description

# Script info
script_name="bashtemplate" # TODO: Set your script name
script_version="v0.5"      # TODO: Set your script version
script_tools="echo date"   # TODO: List all your needed tools



# Activate debug output (uncomment if needed)
#set -x

# From here on warn about unset variables
set -u

# Definition of colors
color_off="\033[0m"
color_black="\033[0;30m"
color_red="\033[0;31m"
color_green="\033[0;32m"
color_yellow="\033[0;33m"
color_blue="\033[0;34m"
color_purple="\033[0;35m"
color_cyan="\033[0;36m"
color_white="\033[0;37m"
color_bold_black="\033[1;30m"
color_bold_red="\033[1;31m"
color_bold_green="\033[1;32m"
color_bold_yellow="\033[1;33m"
color_bold_blue="\033[1;34m"
color_bold_purple="\033[1;35m"
color_bold_cyan="\033[1;36m"
color_bold_white="\033[1;37m"

# Definition of used theme colors
if test -t 1; then
  color_header=$color_bold_red
  color_time=$color_bold_cyan
  color_section=$color_bold_yellow
  color_mark=$color_bold_green
  color_error=$color_bold_red
else
  color_off=
  color_header=
  color_time=
  color_section=
  color_mark=
  color_error=
fi

# Show Terminal Environment and script startup info
echo -en "$color_off""Running $color_mark$script_name$color_off version $color_mark$script_version$color_off as user $color_mark$(id -un)$color_off"
if   [ $# -eq 1 ]; then
  echo -e " with parameter $color_mark$@$color_off"
elif [ $# -gt 1 ]; then
  echo -en " with $color_mark$#$color_off parameters"
  for x in "$@"; do
    echo -en " $color_mark$x$color_off"
  done
else
  echo -e " with $color_mark""no""$color_off parameters"
fi
echo

# Check Parameters
FLAG=""
VAR=""
# TODO: Implement your script parameters
for x in $*; do        # Method 1: Check all parameters in a loop without changing them
  if [ "$x" = "-h" ] || [ "$x" = "--help" ]; then
    echo
  fi
done
while [ $# -gt 0 ]; do # Method 2: Check all parameters by shifting and remove them one by one
  if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    echo "Usage: $0 [OPTION]"
    echo
    echo "Do some fancy stuff..."
    echo
    echo "Options"
    echo "-h, --help      Print this help"
    echo
    echo "Exit status:"
    echo " 0  if OK"
    echo " 1  if ERROR"
    exit 0
  elif [ "$1" = "-f" ] || [ "$1" = "--flag" ]; then
    FLAG=1
    shift
  elif [ "$1" = "-v" ] || [ "$1" = "--var" ]; then
    if [ $# -gt 1 ]; then
      VAR="$2"
    else
      echo -e "Missing parameter for $color_mark$1$color_off"
      exit 1
    fi
    shift
    shift
  else
    echo -e "Unknown parameter $color_mark$1$color_off"
    exit 1
  fi
done

# Show script startup info
echo -ne "$color_header"
# TODO: Implement your script banner here (generate via figlet)
echo " _____                    _       _       "
echo "|_   _|__ _ __ ___  _ __ | | __ _| |_ ___ "
echo "  | |/ _ \ '_ \` _ \| '_ \| |/ _\` | __/ _ \\"
echo "  | |  __/ | | | | | |_) | | (_| | ||  __/"
echo "  |_|\___|_| |_| |_| .__/|_|\__,_|\__\___|"
echo "                   |_|                    "
echo -e "$color_header$script_name $script_version$color_off"
echo

# Check for needed tools
for x in $script_tools; do # Run through tool list
  which $x > /dev/null
  if [ $? -ne 0 ]; then
    echo -e "Tool $color_mark$x$color_off is missing!"
    exit 1
  fi
done

# Start time measurement
echo -e "Starting $color_time$(date '+%Y-%m-%d %H:%M:%S')$color_off"
script_start=$(date '+%s')
echo

##############################################
# Script Start - Implement your script below #
###############################################################################

# TODO: Add Template
# TODO: Add help



# Based on file name restrictions in Windows https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file
# Search for trailing spaces or dots in file and directory names:
#   "Do not end a file or directory name with a space or a period."
echo
echo "Find trailing spaces"
find $* -name "*[ ]" \
  | sort \
  | sed 's/^/  /'

echo
echo "Find trailing dots"
find $* -name "*[\.]" \
  | sort \
  | sed 's/^/  /'

# Search for file and directory names that use the following reserved characters:
#   < (less than)
#   > (greater than)
#   : (colon)
#   " (double quote)
#   / (forward slash)  ==> This can't be used in Linux, therefor we don't search for it
#   \ (backslash)
#   | (vertical bar or pipe)
#   ? (question mark)
#   * (asterisk)
echo
echo "Find bad characters"
find $* -name '*[\<\>\:\"\\\|\?\*]*' \
  | sort \
  | sed 's/^/  /'

# Search for control characters in file and directory names:
#   "Characters whose integer representations are in the range from 1 through 31, ..."
#   This is be handled by using the [:cntrl:] character class in the find command which matches characters 0 through 37, and 177 (DEL).
#   https://www.gnu.org/software/grep/manual/html_node/Character-Classes-and-Bracket-Expressions.html
echo
echo "Find control characters"
find $* -name '*[[:cntrl:]]*' \
  | sort \
  | sed 's/^/  /'

# Search for files that use the following reserved names:
#   CON,
#   PRN,
#   AUX,
#   NUL,
#   COM0, COM1, COM2, COM3, COM4, COM5, COM6, COM7, COM8, COM9, COM¹, COM², COM³,
#   LPT0, LPT1, LPT2, LPT3, LPT4, LPT5, LPT6, LPT7, LPT8, LPT9, LPT¹, LPT², and LPT³
echo
echo "Find reserved file names"
find $* -iname 'CON' \
     -o -iname 'PRN' \
     -o -iname 'AUX' \
     -o -iname 'NUL' \
     -o -iname 'COM[0-9¹²³]' \
     -o -iname 'LPT[0-9¹²³]' \
  | sort \
  | sed 's/^/  /'

# Search for empty files or directories:
echo
echo "Find empty files and directories"
find $* -empty \
  | sort \
  | grep -v "Trash-1000" \
  | grep -v "lost+found" \
  | sed 's/^/  /'

# Assume case-insensitive filesystem and search for file names that differ only by case:
#   "Do not assume case sensitivity. For example, consider the names OSCAR, Oscar, and oscar to be the same,
#   even though some file systems (such as a POSIX-compliant file system) may consider them as different."
echo
echo "Find identical file names when ignoring case"
find $* -type f \
  | sort \
  | tr '[:upper:]' '[:lower:]' \
  | uniq -d \
  | sed 's/^/  /'

# Assume case-insensitive filesystem and search for directory names that differ only by case:
#   "Do not assume case sensitivity. For example, consider the names OSCAR, Oscar, and oscar to be the same,
#   even though some file systems (such as a POSIX-compliant file system) may consider them as different."
echo
echo "Find identical directory names when ignoring case"
find $* -type d \
  | sort \
  | tr '[:upper:]' '[:lower:]' \
  | uniq -d \
  | sed 's/^/  /'

###############################################################################
# Script End - Implement your script above #
############################################

# Stop time measurement
echo
echo -e "Finished $color_time$(date '+%Y-%m-%d %H:%M:%S')$color_off"
script_end="$(date '+%s')"
script_duration="$(( $script_end - $script_start ))"
echo -e "Duration $color_time$script_duration sec$color_off"
echo

# Exit script
exit 0
